<script type="application/x-go">

import (
    "context"
    "fmt"
    "github.com/machinebox/graphql"
)

type Feed struct {
    Loading bool `vugu:"data"`
    Items []PostObject `vugu:"data"`
}


func (c *Feed) Init(ctx vugu.InitCtx) {

    c.Loading = true

    graphqlClient := graphql.NewClient("http://localhost:8080/query")
        graphqlRequest := graphql.NewRequest(`
            query ($communityId: ID!) {
                postsByCommunity(communityId: $communityId){
                    id
                    title
                    content
                    timestamp
                }
            }
        `)

        graphqlRequest.Var("communityId", "ac01d710-8278-4a3b-84b8-6168b2063faf")
        var graphqlResponse map[string][]PostObject
        if err := graphqlClient.Run(context.Background(), graphqlRequest, &graphqlResponse); 
            err != nil {
            panic(err)
        }

        c.Items = graphqlResponse["postsByCommunity"]

        c.Loading = false

}


    
</script>


<style>

.c-feed {
    color: var(--colors-neutral-xx-light);

    max-height: calc(100vh - 60px);
    overflow-y: scroll;

}

::-webkit-scrollbar {
    width: 0px;
    background: transparent; /* make scrollbar transparent */
}



</style>


<div class="c-feed">

<main:CreatePost></main:CreatePost>

<div vg-if='c.Loading'> Loading...</div>

<div vg-if='c.Loading == false && len(c.Items) > 0' > 
            
    <main:Post vg-for=' _,item := range c.Items' :Title="item.Title" :Id="item.Id" :Content='item.Content' :Timestamp='item.Timestamp'></main:Post>
        
        </div>


<main:EndFeed></main:EndFeed>

</div>