<script type="application/x-go">


type PostDetail struct {
    Loading bool `vugu:"data"`
    PostId string `vugu:"data"`

    Title string `vugu:"data"`
    UserId string `vugu:"data"`
    Username string `vugu:"data"`
    Content string `vugu:"data"`
    Timestamp float64 `vugu:"data"`
    UnixTime string `vugu:"data"`
    CommunityId string `vugu:"data"`
    CommunityName string `vugu:"data"`

		Comments []CommentObject `vugu:"data"`

		CommentContent string `vugu:"data"`
		SubmitError bool `vugu:"data"`
}



func (c *PostDetail) Init(ctx vugu.InitCtx) {
    c.Loading = true


        graphqlClient := graphql.NewClient("http://localhost:8080/query")
            graphqlRequest := graphql.NewRequest(`
                query ($postId: ID!) {
                    postById (postId: $postId){
                        id
                        title
                        content
                        timestamp
                        community_id
                        user_id
                    }
                }
            `)

        c.PostId = "0bc8d158-7cd4-4d19-ba14-5e5b7e8d8cb5"

        graphqlRequest.Var("postId", c.PostId)
        var graphqlResponse map[string]map[string]interface{}
        if err := graphqlClient.Run(context.Background(), graphqlRequest, &graphqlResponse);
            err != nil {
            panic(err)
        }

        c.Title = graphqlResponse["postById"]["title"].(string)
        c.UserId = graphqlResponse["postById"]["user_id"].(string)
        c.CommunityId = graphqlResponse["postById"]["community_id"].(string)
        c.Content = graphqlResponse["postById"]["content"].(string)
        c.Timestamp = graphqlResponse["postById"]["timestamp"].(float64)

        // TODO : get Username
        graphqlRequest = graphql.NewRequest(`
                query ($userId: ID!){
                    userById (userId: $userId){
                        id
                        username
                    }
                }
            `)

            graphqlRequest.Var("userId", c.UserId)



            var userResponse map[string]map[string]string
            if err := graphqlClient.Run(context.Background(), graphqlRequest, &userResponse);
                err != nil {
                panic(err)
            }

        c.Username = userResponse["userById"]["username"]


       // get CommunityName

        graphqlRequest = graphql.NewRequest(`
            query ($communityId: ID!) {
                communityById(communityId: $communityId){
                    id
                    name
                    description
                }
            }
        `)

        graphqlRequest.Var("communityId", c.CommunityId)



        var communityResponse map[string]map[string]string
        if err := graphqlClient.Run(context.Background(), graphqlRequest, &communityResponse);
            err != nil {
            panic(err)
        }

        c.CommunityName = communityResponse["communityById"]["name"]



        //TEST : set unixtime
        timeInt := int64(c.Timestamp)
        timeString := time.Unix(timeInt, 0).Format("2006-01-02 15:04:05")
        c.UnixTime = timeString



        //TODO : get Comments
					 graphqlRequest = graphql.NewRequest(`
            query ($postId: ID!) {
							commentsByPost(postId: $postId){
								id
								content
								timestamp
								user_id
  			}
		}

        `)

        graphqlRequest.Var("postId", c.PostId)



        var commentResponse map[string][]CommentObject
        if err := graphqlClient.Run(context.Background(), graphqlRequest, &commentResponse);
            err != nil {
            panic(err)
        }

			c.Comments = commentResponse["commentsByPost"]
      c.Loading = false
}

func (c* PostDetail) CheckInputs() bool {
	//empty check
	if c.CommentContent != "" {

		return true

	} else {

			return false
	}
}


func (c* PostDetail) Submit() {


	newComment := NewComment {
		UserId: c.UserId,
		PostId: c.PostId,
		Content: c.CommentContent,
	}

		graphqlClient := graphql.NewClient("http://localhost:8080/query")
      graphqlRequest := graphql.NewRequest(`
          mutation ($input: NewComment!) {
  					createComment(input: $input) {
    					id
							content
  					}
					}
        `)

        graphqlRequest.Var("input", newComment)
        var commentResponse interface {}
        if err := graphqlClient.Run(context.Background(), graphqlRequest, &commentResponse);
            err != nil {
            panic(err)
        }


}

func (c *PostDetail) CheckSubmit(event vugu.DOMEvent) {
	event.PreventDefault()


	var check bool
	check = c.CheckInputs()

		if check {
		c.SubmitError = false


		go c.Submit()


		// TODO init values



	} else {
		c.SubmitError = true
	}
}



</script>


<style>
    .c-post-detail {
        width: 700px;
        min-height: 100px;


        background-color: var(--colors-neutral-dark);
        margin-top: var(--global-baseline);
        margin-bottom: var(--global-baseline);

        border-radius: var(--global-border-radius);
        padding-top: calc(var(--global-baseline)/2);
        padding-bottom: calc(var(--global-baseline)/4);
        padding-left: var(--global-baseline);
        padding-right: var(--global-baseline);
    }

    .c-post__info {
        display: flex;
        align-items: center;
        gap:  var(--global-baseline);

        max-width: inherit;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    .c-post__info-creds {
        font-size: var(--font-size-sm);
    }

    .c-post__info-timestamp {
        color: var(--colors-neutral-x-light);
        font-size: var(--font-size-sm-2);
    }

    .c-post__title {
        font-size: var(--font-size-lg-2);
        font-weight: 600;
        padding-top: 4px;
        padding-bottom: 8px;

        max-width: inherit;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    .c-post__content {
        font-size: var(--font-size-md);
        margin-bottom: var(--global-baseline);
    }

    .c-divider {

        margin-bottom: calc(var(--global-baseline));
        display: block;
        border-bottom: 1px solid;
        border-color: var(--colors-neutral-light);
    }

    .button-holder {
        width: 100%;
        display: flex;
        justify-content: flex-end;
    }

    .c-form-post {
        display: flex;
        flex-direction: column;
        margin-bottom: var(--global-baseline);
    }

    .c-form-post__label {

        font-size: var(--font-size-md);

    }
    .c-form-post__input {
        margin-bottom: var(--global-baseline);

        background-color: var(--colors-neutral-dark);

        border: 1px solid;
        border-color: var(--colors-neutral-x-light);
        border-radius: var(--global-border-radius);

        color: var(--colors-neutral-xx-light);
        padding: 4px;
        padding-left: 8px;

    }

		.u-input-lg {
			min-height: 60px;
			max-height: 300px;
		}

    .c-submit-post {
        justify-self: flex-end;
        background-color: var(--colors-theme-base);
        color: var(--colors-neutral-xx-light);
    }

    .c-submit-post:hover,
    .c-submit-post:focus {
        background-color: var(--colors-theme-base-light);
        outline: none;
        border: none;

    }

		.c-submit__error {
			color: var(--colors-theme-error);
		}

    .c-all-comments {
        margin-bottom: calc(var(--global-baseline)/2);
    }

</style>

<div>
<div vg-if='c.Loading'> Loading...</div>

<div vg-if='c.Loading == false' class="c-post-detail">
    <div class="c-post__info">
        <div class="c-post__info-creds" vg-content='c.Username'>
        </div>
        <div class="c-post__info-timestamp" vg-content='c.UnixTime'>
        </div>
    </div>
    <div class="c-post__title" vg-content='c.Title'>
    Post Title
    </div>
    <div class="c-post__content" vg-content='c.Content'>

    </div>
    <span class="c-divider"></span>

    <form class="c-form-post">
        <label class="c-form-post__label" for="content">Comment as <strong>Username</strong>:</label>

				<vgform:Textarea id="content" class="c-form-post__input u-input-lg" cols="40" rows="5"  placeholder="Make it engaging."
                :Value='vgform.StringPtrDefault(&c.CommentContent, "")'
                ></vgform:Textarea>

					<div class='c-submit__error' vg-if='c.SubmitError'>Your post needs both a title and some content.</div>

        <div class="button-holder">
            <button @click="c.CheckSubmit(event)" class="button-sm c-submit-post">Comment</button>
        </div>

    </form>
    <div class="c-all-comments">All comments:</div>
    <span class="c-divider"></span>

    <div class="c-comments">
    <main:Comment vg-for=' _, item := range c.Comments' :Id='item.Id' :Content='item.Content' :UserId='item.UserId' :Timestamp='item.Timestamp'></main:Comment>

    </div>


</div>
</div>



